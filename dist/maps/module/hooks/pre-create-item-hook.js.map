{"version":3,"sources":["module/hooks/pre-create-item-hook.ts"],"names":[],"mappings":"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","file":"../../../module/hooks/pre-create-item-hook.js","sourcesContent":["import { ItemType } from '../models';\nimport { getGame, PICK_UP_STIX_FLAG, PICK_UP_STIX_MODULE_NAME, SettingKeys } from '../settings';\nimport { ItemFlags } from '../loot-token';\nimport { error, log } from '../../main';\nimport { getCurrencyTypes } from '../utils';\n\nexport async function preCreateItemHook(itemData: any, options: any = {}, userId: string) {\n  log(` preCreateItemHook | called with args:`);\n  log([itemData, options, userId]);\n\n  if (itemData.type.toLowerCase() === ItemType.CONTAINER) {\n    log(' preCreateItemHook');\n\n    const itemFlags: ItemFlags = {\n      tokenData: {\n        width: 1,\n        height: 1,\n        name: itemData.name,\n        img: itemData.img ?? getGame().settings.get(PICK_UP_STIX_MODULE_NAME, SettingKeys.closeImagePath),\n        disposition: 0,\n        ...(itemData.flags?.[PICK_UP_STIX_MODULE_NAME]?.[PICK_UP_STIX_FLAG]?.tokenData ?? {}),\n      },\n      container: {\n        currency: Object.keys(getCurrencyTypes()).reduce((acc, shortName) => ({ ...acc, [shortName]: 0 }), {}),\n        imageOpenPath: getGame().settings.get(PICK_UP_STIX_MODULE_NAME, SettingKeys.openImagePath),\n        imageClosePath: getGame().settings.get(PICK_UP_STIX_MODULE_NAME, SettingKeys.closeImagePath),\n        soundClosePath: getGame().settings.get(PICK_UP_STIX_MODULE_NAME, SettingKeys.defaultContainerCloseSound),\n        soundOpenPath: getGame().settings.get(PICK_UP_STIX_MODULE_NAME, SettingKeys.defaultContainerOpenSound),\n        ...(itemData.flags?.[PICK_UP_STIX_MODULE_NAME]?.[PICK_UP_STIX_FLAG]?.container ?? {}),\n      },\n      itemType: ItemType.CONTAINER,\n    };\n\n    mergeObject(itemData, {\n      // we checked for item type being container, but that isn't a \"valid\" type. The type of item has to be included in the\n      // getGame().system.entityTypes.Item array. So we look for one that is \"container-like\"; backbpack because that's one that dnd\n      // 5e uses, and if we don't find that we just take whatever thed first item type is. Really it doesn't even matter right now\n      // as the type of this item isn't important, we use the flags itemType property to determine if it's an item or a container\n      // anywhere else anyway\n      type: getGame().system.entityTypes.Item.includes('backpack') ? 'backpack' : getGame().system.entityTypes.Item[0],\n      folder: itemData.folder || getGame().settings.get('pick-up-stix', SettingKeys.itemFolderId),\n      img: itemFlags.tokenData.img,\n      flags: {\n        'pick-up-stix': {\n          'pick-up-stix': itemFlags,\n        },\n      },\n    });\n\n    options.renderSheet = false;\n  }\n\n  log(` preCreateItemHook | final data:`);\n\n  log(itemData);\n}\n"]}