{"version":3,"sources":["module/hooks/pre-update-token-hook.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,sBAAmB;AAEjC,OAAO,EAAE,WAAW,EAAgB,iBAAiB,EAAE,iBAAiB,EAAE,wBAAqB;AAC/F,OAAO,EAAE,OAAO,EAAE,uBAAoB;AACtC,OAAO,EAAE,cAAc,EAAE,oBAAiB;AAE1C;;;;;;;;;;GAUG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAoB,EAAE;IACxG,GAAG,CAAC,sBAAsB,CAAC,CAAC;IAC5B,GAAG,CAAC,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IAElD,MAAM,UAAU,GAAe,WAAW,CAAC,SAAS,EAAE,iCAAiC,CAAC,CAAC;IAEzF,6GAA6G;IAC7G,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,SAAS,IAAI,OAAO,CAAC,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,EAAE;QAChF,OAAO,IAAI,CAAC;KACZ;IAED,iDAAiD;IACjD,IAAI,MAAM,GAAG,cAAc,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IAE1F,qCAAqC;IACrC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,SAAS,CAAC,GAAG,CAAC,CAAC;IAEpD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QACtB,4GAA4G;QAC5G,EAAE,CAAC,aAAa,EAAE,KAAK,CAAC,mDAAmD,CAAC,CAAC;QAC7E,OAAO,KAAK,CAAC;KACb;SACI,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QAC7B,4DAA4D;QAC5D,OAAO,IAAI,CAAC;KACZ;IAED,MAAM,IAAI,GAAS,OAAO,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAE3D,MAAM,eAAe,GAAG,MAAM,iBAAiB,CAAC,MAAM,iBAAiB,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,EAAU,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAElL,IAAI,eAAe,EAAE;QACpB,MAAM,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;KAC3C;IAED,OAAO,KAAK,CAAC;AACd,CAAC,CAAA","file":"../../../module/hooks/pre-update-token-hook.js","sourcesContent":["import { log } from \"../../main\";\r\nimport { TokenFlags } from \"../loot-token\";\r\nimport { deleteToken, getLootToken, handleItemDropped, normalizeDropData } from \"../mainEntry\";\r\nimport { getGame } from \"../settings\";\r\nimport { collidedTokens } from \"../utils\";\r\n\r\n/**\r\n * One thing we want to check before a token is updated would be if the x or y positions are changing. If they are\r\n * then we could be moving the token onto another token and in that case we want to check if it's a valid drop target\r\n *\r\n * @param scene\r\n * @param tokenData\r\n * @param updates\r\n * @param options\r\n * @param userId\r\n * @returns True if the token should update should proces, false if it should not\r\n */\r\nexport const preUpdateTokenHook = async (scene, tokenData, updates, options, userId): Promise<boolean> => {\r\n\tlog(` preUpdateTokenHook:`);\r\n\tlog([scene, tokenData, updates, options, userId]);\r\n\r\n\tconst tokenFlags: TokenFlags = getProperty(tokenData, 'flags.pick-up-stix.pick-up-stix');\r\n\r\n\t// if the x or y positions are not being updated or the token doesn't have an itemId flag, then we don't care\r\n\tif ((updates.y === undefined && updates.x === undefined) || !tokenFlags?.itemId) {\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// get any tokens that are under the new position\r\n\tlet tokens = collidedTokens({ x: updates.x ?? tokenData.x, y: updates.y ?? tokenData.y });\r\n\r\n\t// filter out the token being updated\r\n\ttokens = tokens.filter(t => t.id !== tokenData._id);\r\n\r\n\tif (tokens.length > 1) {\r\n\t\t// if we are dropping it onto more than one token, then we can't know which to drop it onto, notify the user\r\n\t\tui.notifications?.error('You can drop an item onto one and only one target');\r\n\t\treturn false;\r\n\t}\r\n\telse if (tokens.length === 0) {\r\n\t\t// if we're not dropping it onto a token, then we don't care\r\n\t\treturn true;\r\n\t}\r\n\r\n\tconst item = <Item>getGame().items?.get(tokenFlags.itemId);\r\n\r\n\tconst itemDropSuccess = await handleItemDropped(await normalizeDropData({ x: updates.x ?? tokenData.x, y: updates.y ?? tokenData.y, type: item.data.type, id: <string>item.id }));\r\n\r\n\tif (itemDropSuccess) {\r\n\t\tawait deleteToken(tokenData._id, scene.id);\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n"]}