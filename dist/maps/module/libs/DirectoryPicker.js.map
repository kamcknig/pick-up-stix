{"version":3,"sources":["module/libs/DirectoryPicker.ts"],"names":[],"mappings":"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","file":"../../../module/libs/DirectoryPicker.js","sourcesContent":["import { log } from '../../main';\n\n/**\n * Game Settings: Directory\n * @href https://github.com/MrPrimate/vtta-tokenizer/blob/master/src/libs/DirectoryPicker.js\n */\nclass DirectoryPicker extends FilePicker {\n  constructor(options = {}) {\n    super(options);\n  }\n\n  _onSubmit(event) {\n    event.preventDefault();\n    const path = event.target.target.value;\n    const activeSource = this.activeSource;\n    const bucket = event.target.bucket ? event.target.bucket.value : null;\n    //@ts-ignore\n    this.field.value = DirectoryPicker.format({\n      activeSource,\n      bucket,\n      path,\n    });\n    this.close();\n  }\n\n  static async uploadToPath(path, file) {\n    const options = DirectoryPicker.parse(path);\n    return FilePicker.upload(options.activeSource, options.current, file, { bucket: options.bucket });\n  }\n\n  // returns the type \"Directory\" for rendering the SettingsConfig\n  static Directory(val) {\n    return val === null ? '' : String(val);\n  }\n\n  // formats the data into a string for saving it as a GameSetting\n  static format(value) {\n    return value.bucket !== null\n      ? `[${value.activeSource}:${value.bucket}] ${value.path}`\n      : `[${value.activeSource}] ${value.path}`;\n  }\n\n  // parses the string back to something the FilePicker can understand as an option\n  static parse(inStr) {\n    const str = inStr ?? '';\n    let matches = str.match(/\\[(.+)\\]\\s*(.+)?/u);\n\n    if (matches) {\n      let [, source, current = ''] = matches;\n      current = current.trim();\n      const [s3, bucket] = source.split(':');\n      if (bucket !== undefined) {\n        return {\n          activeSource: s3,\n          bucket: bucket,\n          current: current,\n        };\n      } else {\n        return {\n          activeSource: s3,\n          bucket: null,\n          current: current,\n        };\n      }\n    }\n    // failsave, try it at least\n    return {\n      activeSource: 'data',\n      bucket: null,\n      current: str,\n    };\n  }\n\n  static extractUrl(str) {\n    let options = DirectoryPicker.parse(str);\n    if (options.activeSource === 'data' || options.activeSource === 'public') {\n      return undefined;\n    } else {\n      return options.current;\n    }\n  }\n\n  // Adds a FilePicker-Simulator-Button next to the input fields\n  static processHtml(html) {\n    $(html)\n      .find(`input[data-dtype=\"Directory\"]`)\n      .each((index, element) => {\n        $(element).prop('readonly', true);\n\n        if (!$(element).next().length) {\n          logger.debug('Adding Picker Button');\n          let picker = new DirectoryPicker({\n            field: $(element)[0],\n            ...DirectoryPicker.parse($(element).val()),\n          });\n          let pickerButton = $(\n            '<button type=\"button\" class=\"file-picker\" data-type=\"imagevideo\" data-target=\"img\" title=\"Pick directory\"><i class=\"fas fa-file-import fa-fw\"></i></button>',\n          );\n          pickerButton.on('click', () => {\n            picker.render(true);\n          });\n          $(element).parent().append(pickerButton);\n        }\n      });\n  }\n\n  /** @override */\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    // remove unnecessary elements\n    $(html).find('ol.files-list').remove();\n    $(html).find('footer div').remove();\n    $(html).find('footer button').text('Select Directory');\n  }\n\n  static async forgeCreateDirectory(target) {\n    if (!target) return;\n    //@ts-ignore\n    const response = await ForgeAPI.call('assets/new-folder', { path: target });\n    if (!response || response.error) {\n      throw new Error(response ? response.error : 'Unknown error while creating directory.');\n    }\n  }\n\n  /**\n   * @param  {string} source\n   * @param  {string} target\n   * @param  {object} options={}\n   */\n  static async createDirectory(source, target, options = {}): Promise<any> {\n    if (!target) {\n      throw new Error('No directory name provided');\n    }\n    //@ts-ignore\n    if (typeof ForgeVTT !== 'undefined' && ForgeVTT?.usingTheForge) {\n      return DirectoryPicker.forgeCreateDirectory(target);\n    }\n    return FilePicker.createDirectory(source, target, options);\n  }\n\n  /**\n   * Verifies server path exists, and if it doesn't creates it.\n   *\n   * @param  {object} parsedPath - output from DirectoryPicker,parse\n   * @param  {string} targetPath - if set will check this path, else check parsedPath.current\n   * @returns {boolean} - true if verfied, false if unable to create/verify\n   */\n  static async verifyPath(parsedPath, targetPath = null) {\n    try {\n      const paths = targetPath ? String(targetPath).split('/') : parsedPath.current.split('/');\n      let currentSource = paths[0];\n\n      for (let i = 0; i < paths.length; i += 1) {\n        try {\n          if (currentSource !== paths[i]) {\n            currentSource = `${currentSource}/${paths[i]}`;\n          }\n          // eslint-disable-next-line no-await-in-loop\n          await DirectoryPicker.createDirectory(parsedPath.activeSource, `${currentSource}`, {\n            bucket: parsedPath.bucket,\n          });\n        } catch (err) {\n          if (!err.startsWith('EEXIST') && !err.startsWith('The S3 key'))\n            logger.error(`Error trying to verify path [${parsedPath.activeSource}], ${parsedPath.current}`, err);\n        }\n      }\n    } catch (err) {\n      return false;\n    }\n\n    return true;\n  }\n}\n\n// eslint-disable-next-line no-unused-vars\nHooks.on('renderSettingsConfig', (app, html, user) => {\n  DirectoryPicker.processHtml(html);\n});\n\nexport default DirectoryPicker;\n"]}