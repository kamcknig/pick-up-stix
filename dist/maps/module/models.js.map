{"version":3,"sources":["module/models.ts"],"names":[],"mappings":"AAmCA,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,oBAAoB,EAAE,mCAAmC;IACzD,cAAc,EAAE,6BAA6B;IAC7C,aAAa,EAAE,4BAA4B;IAC3C,gBAAgB,EAAE,+BAA+B;IACjD,kBAAkB,EAAE,iCAAiC;CACtD,CAAC;AAEF,MAAM,CAAN,IAAY,iBAoBX;AApBD,WAAY,iBAAiB;IAC3B,gDAA2B,CAAA;IAC3B,8CAAyB,CAAA;IACzB,gDAA2B,CAAA;IAC3B,wDAAmC,CAAA;IACnC,gDAA2B,CAAA;IAC3B,8CAAyB,CAAA;IACzB,8CAAyB,CAAA;IACzB,0DAAqC,CAAA;IACrC,wDAAmC,CAAA;IACnC,wDAAmC,CAAA;IACnC,gDAA2B,CAAA;IAC3B,oDAA+B,CAAA;IAC/B,gDAA2B,CAAA;IAC3B,kDAA6B,CAAA;IAC7B,sDAAiC,CAAA;IACjC,wDAAmC,CAAA;IACnC,8DAAyC,CAAA;IACzC,kEAA6C,CAAA;IAC7C,8DAAyC,CAAA;AAC3C,CAAC,EApBW,iBAAiB,KAAjB,iBAAiB,QAoB5B;AASD,MAAM,CAAN,IAAY,QAIX;AAJD,WAAY,QAAQ;IAClB,yBAAa,CAAA;IACb,yBAAa,CAAA;IACb,mCAAuB,CAAA;AACzB,CAAC,EAJW,QAAQ,KAAR,QAAQ,QAInB","file":"../../module/models.js","sourcesContent":["export interface DropData {\n  // If the item being dropped comes from an actor token, then the tokenId will be available\n  tokenId?: string;\n\n  // If the item being dropped comes from an actor token, then the sceneId that the token\n  // is on will be included.\n  sceneId?: string;\n\n  // If the item being dropped comes from an actor sheet, then the actorId will be included\n  actorId?: string;\n\n  // If the item being droppped comes from a compendium then the pack name will be included\n  pack?: string;\n\n  // The ID of the item Entity being dropped\n  id?: string;\n\n  // The item Entity's data\n  data?: any;\n\n  // If the item Entity being dropped comes from an actor, this will be a reference\n  // to the actor Entity it belongs to\n  actor?: Actor;\n\n  // x and y postion where the item was dropped, this would need to be converted into world coordinates\n  x: number;\n  y: number;\n  gridX: number;\n  gridY: number;\n\n  // this is the type that comes from foundry. We'll test for this when dropping on the item config\n  // application to ensure we are only accepting the \"Item\" types\n  type?: string;\n}\n\nexport const PickUpStixHooks = {\n  itemAddedToContainer: 'pick-up-stix.itemAddedToContainer',\n  currencyLooted: 'pick-up-stix.currencyLooted',\n  itemCollected: 'pick-up-stix.itemCollected',\n  lootTokenCreated: 'pick-up-stix.lootTokenCreated',\n  itemDroppedOnToken: 'pick-up-stix.itemDroppedOnToken',\n};\n\nexport enum SocketMessageType {\n  deleteToken = 'deleteToken',\n  updateItem = 'updateItem',\n  updateActor = 'updateActor',\n  createOwnedItem = 'createOwnedItem',\n  createToken = 'createToken',\n  createItem = 'createItem',\n  deleteItem = 'deleteItem',\n  lootTokenCreated = 'lootTokenCreated',\n  updateOwnedItem = 'updateOwnedItem',\n  deleteOwnedItem = 'deleteOwnedItem',\n  updateToken = 'updateToken',\n  itemCollected = 'itemCollected',\n  collectItem = 'collectItem',\n  lootCurrency = 'lootCurrency',\n  currencyLooted = 'currencyLooted',\n  dropItemOnToken = 'dropItemOnToken',\n  addItemToContainer = 'addItemToContainer',\n  itemAddedToContainer = 'itemAddedToContainer',\n  itemDroppedOnToken = 'itemDroppedOnToken',\n}\n\nexport interface SocketMessage {\n  // user ID of the sender\n  sender: string;\n  type: SocketMessageType;\n  data?: any;\n}\n\nexport enum ItemType {\n  NONE = 'none',\n  ITEM = 'item',\n  CONTAINER = 'container',\n}\n"]}