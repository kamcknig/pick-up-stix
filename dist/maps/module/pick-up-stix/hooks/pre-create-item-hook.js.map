{"version":3,"sources":["module/pick-up-stix/hooks/pre-create-item-hook.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,qBAAkB;AACrC,OAAO,EAAE,WAAW,EAAE,uBAAoB;AAC1C,OAAO,EAAE,gBAAgB,EAAE,0BAAuB;AAElD,OAAO,EAAS,GAAG,EAAE,wBAAqB;AAE1C,MAAM,CAAC,KAAK,UAAU,iBAAiB,CAAC,QAAa,EAAE,UAAe,EAAE,EAAE,MAAc;IACvF,GAAG,CAAC,sDAAsD,CAAC,CAAC;IAC5D,GAAG,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;IAEjC,IAAI,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC,SAAS,EAAE;QACvD,GAAG,CAAC,kCAAkC,CAAC,CAAC;QAExC,MAAM,SAAS,GAAc;YAC5B,SAAS,EAAE;gBACV,KAAK,EAAE,CAAC;gBACR,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,GAAG,EAAE,QAAQ,CAAC,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,cAAc,CAAC;gBAClF,WAAW,EAAE,CAAC;gBACd,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,SAAS,IAAI,EAAE;aACtE;YACD,SAAS,EAAE;gBACV,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC,EAAC,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,EAAC,CAAC,EAAE,EAAE,CAAC;gBACpG,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,aAAa,CAAC;gBAC3E,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,cAAc,CAAC;gBAC7E,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,0BAA0B,CAAC;gBACzF,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,yBAAyB,CAAC;gBACvF,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,cAAc,CAAC,EAAE,SAAS,IAAI,EAAE;aACtE;YACD,QAAQ,EAAE,QAAQ,CAAC,SAAS;SAC5B,CAAC;QAEF,WAAW,CAAC,QAAQ,EAAE;YACrB,sHAAsH;YACtH,yHAAyH;YACzH,4HAA4H;YAC5H,2HAA2H;YAC3H,uBAAuB;YACvB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YACtG,MAAM,EAAE,QAAQ,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,YAAY,CAAC;YACtF,GAAG,EAAE,SAAS,CAAC,SAAS,CAAC,GAAG;YAC5B,KAAK,EAAE;gBACN,cAAc,EAAE;oBACf,cAAc,EAAE,SAAS;iBACzB;aACD;SACD,CAAC,CAAC;QAEH,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC;KAC5B;IAED,GAAG,CAAC,gDAAgD,CAAC,CAAC;IAEtD,GAAG,CAAC,QAAQ,CAAC,CAAC;AACf,CAAC","file":"../../../../module/pick-up-stix/hooks/pre-create-item-hook.js","sourcesContent":["import { ItemType } from \"../models\";\r\nimport { SettingKeys } from \"../settings\";\r\nimport { getCurrencyTypes } from \"../../../utils\";\r\nimport { ItemFlags } from \"../loot-token\";\r\nimport { error, log } from \"../../../log\";\r\n\r\nexport async function preCreateItemHook(itemData: any, options: any = {}, userId: string) {\r\n\tlog(`pick-up-stix | preCreateItemHook | called with args:`);\r\n\tlog([itemData, options, userId]);\r\n\r\n\tif (itemData.type.toLowerCase() === ItemType.CONTAINER) {\r\n\t\tlog('pick-up-stix | preCreateItemHook');\r\n\r\n\t\tconst itemFlags: ItemFlags = {\r\n\t\t\ttokenData: {\r\n\t\t\t\twidth: 1,\r\n\t\t\t\theight: 1,\r\n\t\t\t\tname: itemData.name,\r\n\t\t\t\timg: itemData.img ?? game.settings.get('pick-up-stix', SettingKeys.closeImagePath),\r\n\t\t\t\tdisposition: 0,\r\n\t\t\t\t...itemData.flags?.['pick-up-stix']?.['pick-up-stix']?.tokenData ?? {}\r\n\t\t\t},\r\n\t\t\tcontainer: {\r\n\t\t\t\tcurrency: Object.keys(getCurrencyTypes()).reduce((acc, shortName) => ({...acc, [shortName]: 0}), {}),\r\n\t\t\t\timageOpenPath: game.settings.get('pick-up-stix', SettingKeys.openImagePath),\r\n\t\t\t\timageClosePath: game.settings.get('pick-up-stix', SettingKeys.closeImagePath),\r\n\t\t\t\tsoundClosePath: game.settings.get('pick-up-stix', SettingKeys.defaultContainerCloseSound),\r\n\t\t\t\tsoundOpenPath: game.settings.get('pick-up-stix', SettingKeys.defaultContainerOpenSound),\r\n\t\t\t\t...itemData.flags?.['pick-up-stix']?.['pick-up-stix']?.container ?? {}\r\n\t\t\t},\r\n\t\t\titemType: ItemType.CONTAINER\r\n\t\t};\r\n\r\n\t\tmergeObject(itemData, {\r\n\t\t\t// we checked for item type being container, but that isn't a \"valid\" type. The type of item has to be included in the\r\n\t\t\t// game.system.entityTypes.Item array. So we look for one that is \"container-like\"; backbpack because that's one that dnd\r\n\t\t\t// 5e uses, and if we don't find that we just take whatever thed first item type is. Really it doesn't even matter right now\r\n\t\t\t// as the type of this item isn't important, we use the flags itemType property to determine if it's an item or a container\r\n\t\t\t// anywhere else anyway\r\n\t\t\ttype: game.system.entityTypes.Item.includes('backpack') ? 'backpack' : game.system.entityTypes.Item[0],\r\n\t\t\tfolder: itemData.folder || game.settings.get('pick-up-stix', SettingKeys.itemFolderId),\r\n\t\t\timg: itemFlags.tokenData.img,\r\n\t\t\tflags: {\r\n\t\t\t\t'pick-up-stix': {\r\n\t\t\t\t\t'pick-up-stix': itemFlags\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\toptions.renderSheet = false;\r\n\t}\r\n\r\n\tlog(`pick-up-stix | preCreateItemHook | final data:`);\r\n\r\n\tlog(itemData);\r\n}"]}