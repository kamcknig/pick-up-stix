{"version":3,"sources":["module/pick-up-stix/settings.ts"],"names":[],"mappings":"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","file":"../../../module/pick-up-stix/settings.js","sourcesContent":["import { log } from \"../../log\";\n\nexport const MODULE_NAME = 'pick-up-stix';\n\n/**\n * Because typescript doesn't know when in the lifecycle of foundry your code runs, we have to assume that the\n * canvas is potentially not yet initialized, so it's typed as declare let canvas: Canvas | {ready: false}.\n * That's why you get errors when you try to access properties on canvas other than ready.\n * In order to get around that, you need to type guard canvas.\n * Also be aware that this will become even more important in 0.8.x because no canvas mode is being introduced there.\n * So you will need to deal with the fact that there might not be an initialized canvas at any point in time.\n * @returns\n */\n export function getCanvas(): Canvas {\n\tif (!(canvas instanceof Canvas) || !canvas.ready) {\n\t\tthrow new Error('Canvas Is Not Initialized');\n\t}\n\treturn canvas;\n}\n\nexport enum SettingKeys {\n\topenImagePath = 'default-container-opened-image-path',\n\tcloseImagePath = 'default-container-closed-image-path',\n\tdisableCurrencyLoot = 'disable-currency-loot',\n\tdefaultContainerCloseSound = 'default-container-close-sound',\n\tdefaultContainerOpenSound = 'default-container-open-sound',\n\tversion = 'version',\n\tlootTokenData = 'lootTokenData',\n\tparentItemFolderId = 'parentFolderId',\n\ttokenFolderId = 'tokenFolderId',\n\titemFolderId = 'itemFolderId',\n\tversion13updatemessage = 'version13updatemessage',\n\tGMActionTimeout = 'GMActionTimeout',\n\taddItemOnContainerCreation = 'addItemOnContainerCreation',\n\tenableLootTokenPerceiveReveal = 'enableLootTokenPerceiveReveal',\n\tdefaultMinimumPerceiveValue = 'defaultMinimumPerceiveValue'\n}\n\nconst systemCurrenciesImplemented = [\n\t'dnd5e','D35E'\n];\n\nexport const gmActionTimeout = (multiplier: number = 1000): number => {\n\treturn (<number>(game.settings.get('pick-up-stix', SettingKeys.GMActionTimeout) ?? 2)) * multiplier;\n}\n\n// const imageTypeFunc = (val) => {\n// \treturn val;\n// }\n// Object.defineProperty(imageTypeFunc, 'name', {value: 'pick-up-stix-settings-image'});\n\n// const audioTypeFunc = (val) => {\n// \treturn val;\n// }\n// Object.defineProperty(audioTypeFunc, 'name', {value: 'pick-up-stix-settings-audio'});\n\nexport const registerSettings = function() {\n\tlog(`pick-up-stix | registerSettings`);\n\tregisterHiddenSettings();\n\tregisterWorldSettings();\n\tregisterClientSettings();\n}\n\nconst registerHiddenSettings = () => {\n\tgame.settings.register('pick-up-stix', SettingKeys.GMActionTimeout, {\n\t\tname: 'GM Action Timeout',\n\t\thint: 'Controls the amount of time to wait for a GM client to perform a GM action before giving up',\n\t\tscope: 'world',\n\t\ttype: Number,\n\t\tdefault: 2,\n\t\tconfig: false\n\t});\n\n  game.settings.register('pick-up-stix', SettingKeys.version13updatemessage, {\n    name: 'Version 13 Update Message',\n    hint: 'Tracks if user received the version 13 update message',\n    scope: 'world',\n    config: false,\n    type: Boolean,\n    default: false\n  });\n\n\tgame.settings.register('pick-up-stix', SettingKeys.version, {\n\t\tname: 'Version',\n\t\thint: 'Used to track which version is last loaded, so that we can give updates to users',\n\t\tscope: 'world',\n\t\tconfig: false,\n\t\ttype: String,\n\t\tdefault: '0.0.0'\n\t});\n\n\tgame.settings.register('pick-up-stix', SettingKeys.parentItemFolderId, {\n\t\tname: 'Parent Item Folder ID',\n\t\thint: 'The folder ID of the main Pick-Up-Stix folder in the Items Directory',\n\t\tscope: 'world',\n\t\tconfig: false,\n\t\ttype: String\n\t});\n\n\tgame.settings.register('pick-up-stix', SettingKeys.itemFolderId, {\n\t\tname: 'Items Folder ID',\n\t\thint: 'The Folder ID of the sub folder to hold templates for loot',\n\t\tscope: 'world',\n\t\tconfig: false,\n\t\ttype: String\n\t});\n\n\tgame.settings.register('pick-up-stix', SettingKeys.tokenFolderId, {\n\t\tname: 'Tokens folder ID',\n\t\thint: 'The Folder ID of the sub folder to hold Items representing tokens',\n\t\tscope: 'world',\n\t\tconfig: false,\n\t\ttype: String\n\t});\n}\n\nconst registerWorldSettings = () => {\n\tgame.settings.register('pick-up-stix', SettingKeys.enableLootTokenPerceiveReveal, {\n\t\tname: 'Loot Token Reveal',\n\t\thint: `Enables auto-revealing loot tokens that players with controlled tokens are able to see with their passive 'perceive' value.`,\n\t\tscope: 'world',\n\t\tconfig: game.system.id === 'dnd5e',\n\t\ttype: Boolean,\n\t\tdefault: false\n\t});\n\n\tgame.settings.register('pick-up-stix', SettingKeys.defaultMinimumPerceiveValue, {\n\t\tname: 'Minimum Perceive Value',\n\t\thint: `The minimum value a token's actor must have in order to perceive a hidden loot token.`,\n\t\tscope: 'world',\n\t\tconfig: game.system.id === 'dnd5e',\n\t\ttype: Number,\n\t\tdefault: 10\n\t});\n\n\tgame.settings.register('pick-up-stix', SettingKeys.openImagePath, {\n\t\tname: 'Default Container Opened Image',\n\t\thint: 'Sets the path for the default image to use for opened containers',\n\t\tscope: 'world',\n\t\tconfig: true,\n\t\t//type: imageTypeFunc,\n    type: String,\n    //@ts-ignore\n    filePicker: true,\n\t\tdefault: 'modules/pick-up-stix/assets/chest-opened.png'\n\t});\n\n\tgame.settings.register('pick-up-stix', SettingKeys.closeImagePath, {\n\t\tname: 'Default Container Closed Image',\n\t\thint: 'Sets the path for the default image to use for closed containers',\n\t\tscope: 'world',\n\t\tconfig: true,\n\t\t//type: imageTypeFunc,\n    type: String,\n    //@ts-ignore\n    filePicker: true,\n\t\tdefault: 'modules/pick-up-stix/assets/chest-closed.png'\n\t});\n\n\tgame.settings.register('pick-up-stix', SettingKeys.disableCurrencyLoot, {\n\t\tname: 'Disable Currency Loot',\n\t\thint: `This option is enabled by default for systems that have not been implemented in Pick-Up-Stix yet. You can also use it to manually disable currency if you don't wish to have currency as loot.`,\n\t\tscope: 'world',\n\t\tconfig: true,\n\t\ttype: Boolean,\n\t\tdefault: !systemCurrenciesImplemented.includes(game.system.id)\n\t});\n\n\tgame.settings.register('pick-up-stix', SettingKeys.defaultContainerOpenSound, {\n\t\tname: 'Default Container Open Sound',\n\t\thint: 'The default sound to play when opening a container.',\n\t\tscope: 'world',\n\t\t//type: audioTypeFunc,\n    type: String,\n    //@ts-ignore\n    filePicker: true,\n\t\tconfig: true\n\t});\n\n\tgame.settings.register('pick-up-stix', SettingKeys.defaultContainerCloseSound, {\n\t\tname: 'Default Container Close Sound',\n\t\thint: 'The default sound to play when closing a container.',\n\t\tscope: 'world',\n\t\t//type: audioTypeFunc,\n    type: String,\n    //@ts-ignore\n    filePicker: true,\n\t\tconfig: true\n\t});\n\n\tgame.settings.register('pick-up-stix', SettingKeys.addItemOnContainerCreation, {\n\t\tname: 'Auto-add Item',\n\t\thint: `When enabled and dragging an Item to the canvas in order to create a container, the Item used to create the container will automatically be added to the created container rather than creating an empty container.`,\n\t\tscope: 'world',\n\t\tconfig: true,\n\t\ttype: Boolean,\n\t\tdefault: true\n\t});\n}\n\nconst registerClientSettings = () => {\n\n}\n\n// export function processHtml(html) {\n// \t$(html)\n// \t\t.find('input[data-dtype=\"pick-up-stix-settings-image\"')\n// \t\t.each(function() {\n// \t\t\tconst settingName = $(this).attr('name').split('.')[1];\n// \t\t\tlog(settingName);\n\n// \t\t\tlet picker = new FilePicker({\n// \t\t\t\ttype: 'image',\n// \t\t\t\tcurrent: <string>game.settings.get('pick-up-stix', settingName),\n// \t\t\t\tfield: $(this)[0]\n// \t\t\t});\n\n// \t\t\tlet pickerButton = $('<button type=\"button\" class=\"file-picker\" title=\"Pick image\"><i class=\"fas fa-file-import fa-fw\"></i></button>');\n// \t\t\tpickerButton.on(\"click\", function () {\n// \t\t\t\tpicker.render(true);\n// \t\t\t});\n// \t\t\t$(this).parent().append(pickerButton);\n// \t\t});\n\n// \t\t$(html)\n// \t\t.find('input[data-dtype=\"pick-up-stix-settings-audio\"')\n// \t\t.each(function() {\n// \t\t\tconst settingName = $(this).attr('name').split('.')[1];\n// \t\t\tlog(settingName);\n\n// \t\t\tlet picker = new FilePicker({\n// \t\t\t\ttype: 'audio',\n// \t\t\t\tcurrent: <string>game.settings.get('pick-up-stix', settingName),\n// \t\t\t\tfield: $(this)[0]\n// \t\t\t});\n\n// \t\t\tlet pickerButton = $('<button type=\"button\" class=\"file-picker\" title=\"Pick image\"><i class=\"fas fa-file-import fa-fw\"></i></button>');\n// \t\t\tpickerButton.on(\"click\", function () {\n// \t\t\t\tpicker.render(true);\n// \t\t\t});\n// \t\t\t$(this).parent().append(pickerButton);\n// \t\t})\n// }\n"]}